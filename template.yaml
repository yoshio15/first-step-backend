# 各プロパティの参考
# https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md
AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  first-step-backend
  SAM Template for first-step-backend

# 各リソース共通の変数
# https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
  Api:
    Cors:
      AllowMethods: "'OPTIONS,POST,GET'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Resources:

  # Lambda関数
  # https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
  GetWorksListFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/works/get-works-list/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt DynamoAccessRole.Arn
      Events:
        GetWorks:
          Type: Api
          Properties:
            Path: /get-works-list
            Method: get
  GetWorksListFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${GetWorksListFunction}
      RetentionInDays: 3

  GetWorkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/works/get-work/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt DynamoAccessRole.Arn
      Events:
        GetWorks:
          Type: Api
          Properties:
            Path: /get-work/{work_id}
            Method: get
  GetWorkFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${GetWorkFunction}
      RetentionInDays: 3

  PostWorkFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/works/post-work/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt DynamoAccessRole.Arn
      Events:
        PostWork:
          Type: Api
          Properties:
            Path: /post-work
            Method: post
  PostWorkFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${PostWorkFunction}
      RetentionInDays: 3

  GetS3PresignedUrlFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/works/get-s3-presigned-url/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt S3AccessRole.Arn
      Events:
        PostWork:
          Type: Api
          Properties:
            Path: /get-s3-presigned-url/{work_id}
            Method: get
  GetS3PresignedUrlFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${GetS3PresignedUrlFunction}
      RetentionInDays: 3

  GetS3PresignedUrlForUserIconFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/users/get-s3-presigned-url-for-user-icon/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt S3AccessRole.Arn
      Events:
        GetS3PresignedUrlForUserIcon:
          Type: Api
          Properties:
            Path: /get-s3-presigned-url-for-user-icon/{user_id}/{content}/{type}
            Method: get
  GetS3PresignedUrlForUserIconFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${GetS3PresignedUrlForUserIconFunction}
      RetentionInDays: 3

  GetUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/users/get-user/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt UsersInfoAccessRole.Arn
      Events:
        GetUser:
          Type: Api
          Properties:
            Path: /get-user/{user_id}
            Method: get
  GetUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${GetUserFunction}
      RetentionInDays: 3

  UpdateUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/users/update-user/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt UsersInfoAccessRole.Arn
      Events:
        UpdateUser:
          Type: Api
          Properties:
            Path: /update-user
            Method: post
  UpdateUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${UpdateUserFunction}
      RetentionInDays: 3

  PostUserFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/users/post-user/
      Handler: app.lambdaHandler
      Runtime: nodejs12.x
      Role: !GetAtt UsersInfoAccessRole.Arn
      Events:
        PostUser:
          Type: Api
          Properties:
            Path: /post-user
            Method: post
  PostUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub /aws/lambda/${PostUserFunction}
      RetentionInDays: 3

  # DynamoDB
  WorksTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: works-table
      PrimaryKey:
        Name: work_id
        Type: String
  
  UsersTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: users-table
      PrimaryKey:
        Name: user_id
        Type: String

  # IAM Role
  S3AccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Description: "Role for accessing S3"
      Path: "/"
      Policies:
        - PolicyName: "s3-access-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
              # Action種類 https://docs.aws.amazon.com/ja_jp/AmazonS3/latest/dev/using-with-s3-actions.html
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 'arn:aws:s3:::dev-first-step-works/*'
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 'arn:aws:s3:::dev-first-step-users/*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: "arn:aws:logs:ap-northeast-1:*:*"

  DynamoAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Description: "Role for accessing DynamoDB"
      Path: "/"
      Policies:
        - PolicyName: "dynamo-access-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt WorksTable.Arn
              - Effect: "Allow"
                Action:
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                Resource: !GetAtt UsersTable.Arn
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: "arn:aws:logs:ap-northeast-1:*:*"
            # - Effect: Allow
            #   Action: 
            #     - s3:ListBucket
            #   Resource: !GetAtt FirstStepBackendLogs.Arn
            # - Effect: Allow
            #   Action:
            #     - s3:GetObject
            #     - s3:PutObject
            #   Resource: !Sub "arn:aws:s3:::${FirstStepBackendLogs}/*"

  UsersInfoAccessRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: "sts:AssumeRole"
      Description: "Role for accessing S3"
      Path: "/"
      Policies:
        - PolicyName: "users-info-access-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - dynamodb:Scan
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                Resource: !GetAtt UsersTable.Arn
              - Effect: "Allow"
                Action:
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt WorksTable.Arn
              - Effect: "Allow"
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: 'arn:aws:s3:::dev-first-step-users/*'
              - Effect: Allow
                Action:
                  - logs:PutLogEvents
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                Resource: "arn:aws:logs:ap-northeast-1:*:*"
      
  # # S3
  # FirstStepBackendLogs:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: first-step-backend-logs

  # # S3 Bucket Policy
  # FirstStepBackendLogsPolicy:
  #   Type: AWS::S3::BucketPolicy
  #   Properties: 
  #     Bucket: first-step-backend-logs
  #     PolicyDocument:
  #       Statement:
  #         - Effect: Allow
  #           Principal:
  #             Service: logs.ap-northeast-1.amazonaws.com
  #           Action:
  #             - s3:GetBucketAcl
  #           Resource: !GetAtt FirstStepBackendLogs.Arn
  #         - Effect: Allow
  #           Principal:
  #             Service: logs.ap-northeast-1.amazonaws.com
  #           Action:
  #             - s3:PutObject
  #           Resource: !Sub "arn:aws:s3:::${FirstStepBackendLogs}/*"
  #           Condition:
  #             StringEquals:
  #               s3:x-amz-acl: bucket-owner-full-control